// Generated by CoffeeScript 1.6.2
(function() {
  var canvas, mouseX, mouseY, mouse_drag, mouse_dragging, room_guid, socket;

  Canvas.prototype.draw_blob = function(x, y) {
    this.fillStyle("#000000");
    return this.fillCircle(x, y, 5);
  };

  console.log(window.location.hash);

  if ((window.location.hash != null) && window.location.hash.length > 0) {
    $(".whiteboard-container").css("display", "block");
    room_guid = window.location.hash.substr(1);
    socket = io.connect("http://127.0.0.1/");
    socket.on("debug", function(data) {
      return console.log(data);
    });
    socket.emit("join", {
      room_guid: room_guid
    });
    socket.on("draw", function(data) {
      return canvas.draw_blob(data.x, data.y);
    });
    $(".whiteboard-container").css("height", $(document).height() - $(".header").height() + "px");
    $(".whiteboard-container").css("width", $(document).width() + "px");
    canvas = new Canvas('whiteboard', 0, function() {
      return this.clear();
    });
    mouseX = mouseY = 0;
    mouse_dragging = false;
    canvas.onMouseDown = function(x, y, button) {
      return mouse_dragging = [true, button];
    };
    canvas.onMouseUp = function(x, y, button) {
      return mouse_dragging = false;
    };
    canvas.onMouseMove = function(x, y) {
      mouseX = x;
      return mouseY = y;
    };
    mouse_drag = window.setInterval(function(position) {
      if ((mouse_dragging != null) && mouse_dragging[0]) {
        console.log(room_guid);
        if (mouse_dragging[1] === 1) {
          return socket.emit("draw", {
            room_guid: room_guid,
            x: mouseX,
            y: mouseY - $(".header").height()
          });
        } else if (mouse_dragging[1] === 3) {
          return socket.emit("erase", {
            room_guid: room_guid,
            x: mouseX,
            y: mouseY - $(".header").height()
          });
        } else {

        }
      }
    }, 1, mouse_dragging);
    /*
    canvas.onMouseDown = (x, y, button) ->
      if button == 1
        socket.emit("draw",
          room_guid: room_guid
          x: x
          y: y - $(".header").height()
        )
      else if button == 3
        socket.emit("erase",
          room_guid: room_guid
          x: x
          y: y - $(".header").height()
        )
      else
        return
    */

  } else {
    $(".content-container").css("display", "block");
    $("#create-new-room").click(function() {
      window.location.hash = uuid.v4();
      return window.location.reload(true);
    });
  }

}).call(this);
